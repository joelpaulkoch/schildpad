//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: lib/installed_app_widgets/proto/installed_app_widgets.proto

package app.schildpad.schildpad.protos;

@kotlin.jvm.JvmName("-initializeappWidget")
inline fun appWidget(block: app.schildpad.schildpad.protos.AppWidgetKt.Dsl.() -> kotlin.Unit): app.schildpad.schildpad.protos.AppWidget =
    app.schildpad.schildpad.protos.AppWidgetKt.Dsl._create(app.schildpad.schildpad.protos.AppWidget.newBuilder())
        .apply { block() }._build()

object AppWidgetKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
        private val _builder: app.schildpad.schildpad.protos.AppWidget.Builder
    ) {
        companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: app.schildpad.schildpad.protos.AppWidget.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): app.schildpad.schildpad.protos.AppWidget = _builder.build()

        /**
         * <code>string packageName = 1;</code>
         */
        var packageName: kotlin.String
            @JvmName("getPackageName")
            get() = _builder.getPackageName()
            @JvmName("setPackageName")
            set(value) {
                _builder.setPackageName(value)
            }

        /**
         * <code>string packageName = 1;</code>
         */
        fun clearPackageName() {
            _builder.clearPackageName()
        }

        /**
         * <code>string label = 2;</code>
         */
        var label: kotlin.String
            @JvmName("getLabel")
            get() = _builder.getLabel()
            @JvmName("setLabel")
            set(value) {
                _builder.setLabel(value)
            }

        /**
         * <code>string label = 2;</code>
         */
        fun clearLabel() {
            _builder.clearLabel()
        }

        /**
         * <code>string description = 3;</code>
         */
        var description: kotlin.String
            @JvmName("getDescription")
            get() = _builder.getDescription()
            @JvmName("setDescription")
            set(value) {
                _builder.setDescription(value)
            }

        /**
         * <code>string description = 3;</code>
         */
        fun clearDescription() {
            _builder.clearDescription()
        }

        /**
         * <code>.schildpad.AppWidget.DrawableData icon = 4;</code>
         */
        var icon: app.schildpad.schildpad.protos.AppWidget.DrawableData
            @JvmName("getIcon")
            get() = _builder.getIcon()
            @JvmName("setIcon")
            set(value) {
                _builder.setIcon(value)
            }

        /**
         * <code>.schildpad.AppWidget.DrawableData icon = 4;</code>
         */
        fun clearIcon() {
            _builder.clearIcon()
        }

        /**
         * <code>.schildpad.AppWidget.DrawableData icon = 4;</code>
         * @return Whether the icon field is set.
         */
        fun hasIcon(): kotlin.Boolean {
            return _builder.hasIcon()
        }

        /**
         * <code>.schildpad.AppWidget.DrawableData preview = 6;</code>
         */
        var preview: app.schildpad.schildpad.protos.AppWidget.DrawableData
            @JvmName("getPreview")
            get() = _builder.getPreview()
            @JvmName("setPreview")
            set(value) {
                _builder.setPreview(value)
            }

        /**
         * <code>.schildpad.AppWidget.DrawableData preview = 6;</code>
         */
        fun clearPreview() {
            _builder.clearPreview()
        }

        /**
         * <code>.schildpad.AppWidget.DrawableData preview = 6;</code>
         * @return Whether the preview field is set.
         */
        fun hasPreview(): kotlin.Boolean {
            return _builder.hasPreview()
        }

        /**
         * <code>int32 targetWidth = 7;</code>
         */
        var targetWidth: kotlin.Int
            @JvmName("getTargetWidth")
            get() = _builder.getTargetWidth()
            @JvmName("setTargetWidth")
            set(value) {
                _builder.setTargetWidth(value)
            }

        /**
         * <code>int32 targetWidth = 7;</code>
         */
        fun clearTargetWidth() {
            _builder.clearTargetWidth()
        }

        /**
         * <code>int32 targetHeight = 8;</code>
         */
        var targetHeight: kotlin.Int
            @JvmName("getTargetHeight")
            get() = _builder.getTargetHeight()
            @JvmName("setTargetHeight")
            set(value) {
                _builder.setTargetHeight(value)
            }

        /**
         * <code>int32 targetHeight = 8;</code>
         */
        fun clearTargetHeight() {
            _builder.clearTargetHeight()
        }

        /**
         * <code>int32 minWidth = 9;</code>
         */
        var minWidth: kotlin.Int
            @JvmName("getMinWidth")
            get() = _builder.getMinWidth()
            @JvmName("setMinWidth")
            set(value) {
                _builder.setMinWidth(value)
            }

        /**
         * <code>int32 minWidth = 9;</code>
         */
        fun clearMinWidth() {
            _builder.clearMinWidth()
        }

        /**
         * <code>int32 minHeight = 10;</code>
         */
        var minHeight: kotlin.Int
            @JvmName("getMinHeight")
            get() = _builder.getMinHeight()
            @JvmName("setMinHeight")
            set(value) {
                _builder.setMinHeight(value)
            }

        /**
         * <code>int32 minHeight = 10;</code>
         */
        fun clearMinHeight() {
            _builder.clearMinHeight()
        }
    }

    @kotlin.jvm.JvmName("-initializedrawableData")
    inline fun drawableData(block: app.schildpad.schildpad.protos.AppWidgetKt.DrawableDataKt.Dsl.() -> kotlin.Unit): app.schildpad.schildpad.protos.AppWidget.DrawableData =
        app.schildpad.schildpad.protos.AppWidgetKt.DrawableDataKt.Dsl._create(app.schildpad.schildpad.protos.AppWidget.DrawableData.newBuilder())
            .apply { block() }._build()

    object DrawableDataKt {
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        @com.google.protobuf.kotlin.ProtoDslMarker
        class Dsl private constructor(
            private val _builder: app.schildpad.schildpad.protos.AppWidget.DrawableData.Builder
        ) {
            companion object {
                @kotlin.jvm.JvmSynthetic
                @kotlin.PublishedApi
                internal fun _create(builder: app.schildpad.schildpad.protos.AppWidget.DrawableData.Builder): Dsl =
                    Dsl(builder)
            }

            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _build(): app.schildpad.schildpad.protos.AppWidget.DrawableData = _builder.build()

            /**
             * <code>bytes data = 1;</code>
             */
            var data: com.google.protobuf.ByteString
                @JvmName("getData")
                get() = _builder.getData()
                @JvmName("setData")
                set(value) {
                    _builder.setData(value)
                }

            /**
             * <code>bytes data = 1;</code>
             */
            fun clearData() {
                _builder.clearData()
            }
        }
    }
}

@kotlin.jvm.JvmSynthetic
inline fun app.schildpad.schildpad.protos.AppWidget.copy(block: app.schildpad.schildpad.protos.AppWidgetKt.Dsl.() -> kotlin.Unit): app.schildpad.schildpad.protos.AppWidget =
    app.schildpad.schildpad.protos.AppWidgetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun app.schildpad.schildpad.protos.AppWidget.DrawableData.copy(block: app.schildpad.schildpad.protos.AppWidgetKt.DrawableDataKt.Dsl.() -> kotlin.Unit): app.schildpad.schildpad.protos.AppWidget.DrawableData =
    app.schildpad.schildpad.protos.AppWidgetKt.DrawableDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val app.schildpad.schildpad.protos.AppWidgetOrBuilder.iconOrNull: app.schildpad.schildpad.protos.AppWidget.DrawableData?
    get() = if (hasIcon()) getIcon() else null

val app.schildpad.schildpad.protos.AppWidgetOrBuilder.previewOrNull: app.schildpad.schildpad.protos.AppWidget.DrawableData?
    get() = if (hasPreview()) getPreview() else null

